#!/usr/bin/env php
<?php

use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

ini_set('display_startup_errors', 1);
ini_set('display_errors', 1);
error_reporting(E_ALL);

set_time_limit(0);

$loader = require(__DIR__.'/../../../autoload.php');
$kernel = new AppKernel('dev', true);
$kernel->boot();
$container = $kernel->getContainer();
$logger = $container->get('logger');
$input = new ArgvInput();
$output = new ConsoleOutput();
$output->setFormatter(new OutputFormatter(true));
$config = $container->getParameter('bandcamp_downloader.config');

if (!isset($container->getParameter('kernel.bundles')['BandcampDownloaderBundle'])) {
    $output->writeln('<error>Bundle "BandcampDownloaderBundle" is not enabled in AppKernel</error>');
    exit;
}

if ($input->hasParameterOption(['-h', '-H', '--help'])) {
    echo "
Usage: bandcamp-downloader [options] <url>
Options:
  -s --save-path   Sve path directory (default: '{$config['save_path']}')
  -h -H --help     This help message
";
    exit;
}

if (!$url = $input->getFirstArgument()) {
    $output->writeln('<error>Specify a bandcamp album url as 1st argument</error>');
    exit;
}

$savePath = $input->getParameterOption(['-s', '--save-path'], $config['save_path']);
$output->writeln("Saving in: <comment>{$savePath}</comment>");

if (!$url = $input->getFirstArgument()) {
    $output->writeln('<error>Specify a bandcamp album url as 1st argument</error>');
    exit;
}

$output->write('Fetching... ');
if (!$html = @file_get_contents($url)) {
    $output->writeln("<error>URL did not return any HTML</error>");
    exit;
}
$output->writeln('<info>[OK]</info>');

$crawler = new Crawler($html);

// find artist
$artistEl = $crawler->filter($config['selectors']['artist']);
if ($artistEl->count() !== 1) {
    $output->writeln("<error>No artist name could be found</error>");
    exit;
}
$artist = trim($artistEl->text());
$output->writeln("Artist: <info>{$artist}</info>");

// find album
$albumEl = $crawler->filter($config['selectors']['album']);
if ($albumEl->count() !== 1) {
    $output->writeln("<error>No album name could be found</error>");
    exit;
}
$album = trim($albumEl->text());
$output->writeln("Album: <info>{$album}</info>");

// find cover
$coverEl = $crawler->filter($config['selectors']['cover']);
$cover = false;
if ($coverEl->count() === 1) {
    $cover = trim($coverEl->attr('src'));
}
$output->writeln('Cover: '.($cover ? '<info>OK</info>' : '<error>NOT FOUND</error>'));

// find tracks
$tracksEls = $crawler->filter($config['selectors']['tracks']);
if (!$nbTracks = $tracksEls->count()) {
    $output->writeln("<error>No tracks could be found</error>");
    exit;
}
$output->writeln("Found <info>{$nbTracks}</info> tracks");

$tracks = [];
$tracksEls->each(
    function (Crawler $node) use (&$tracks) {
        $tracks[trim($node->text())] = $node->attr('href');
    }
);

// Create directory
$output->write("Creating album directory... ");
$dir = sprintf(
    '%s%s%s - %s',
    $savePath,
    DIRECTORY_SEPARATOR,
    strtoupper(str_replace('-', '', $artist)),
    ucwords(strtolower(str_replace('-', '', $album)))
);
if (!is_dir($dir)) {
    if (!@mkdir($dir)) {
        $output->writeln("<error>Could not create directory {$dir}</error>");
        exit;
    }
}

$output->writeln('<info>[OK]</info>');

// Download tracks
$i = 1;
$parsedUrl = parse_url($url);
$youtubeDlDir = $config['bin_path'];
$baseDir = getcwd();

foreach ($tracks as $name => $trackLink) {
    $name = html_entity_decode($name, ENT_QUOTES, 'UTF-8');
    $nbTrack = sprintf('%02d', $i);
    $trackLink = "{$parsedUrl['scheme']}://{$parsedUrl['host']}{$trackLink}";

    $output->writeln("Downloading track <comment>{$nbTrack} {$name}</comment>");

    $fileEscaped = "{$dir}/".str_replace(['"', '/'], ['\"', '-'], "{$nbTrack} {$name}.mp3");

    $cmd = "cd {$youtubeDlDir}; youtube-dl -o\"{$fileEscaped}\" --prefer-ffmpeg '$trackLink'";
    $process = new Process($cmd);
    try {
        $process->run(function ($type, $buffer) use ($output) {
            if (Process::ERR === $type) {
                $output->write("<error>{$buffer}</error>");
            } else {
                $output->write($buffer);
            }
        });
    } catch (ProcessFailedException $e) {
        chdir($baseDir);
        $output->writeln("\n\nCommand was: {$cmd}");
        $output->writeln('<error>'.$e->getMessage().'</error>');
        exit;
    }
    $i++;
}

chdir($baseDir);

// get cover image
if ($cover) {
    $output->write("Get cover image... ");
    $path = "{$dir}/cover.jpg";
    if (!@file_put_contents($path, @file_get_contents($cover))) {
        $output->writeln("<error>Could not save cover image from:\n{$cover}</error>");
        exit;
    }
}

$output->writeln("<info>DONE!</info>");
